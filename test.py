# -*- coding: utf-8 -*-
"""test.ipynb
Automatically generated by Colab.
"""

import numpy
from transformers import DetrForObjectDetection, DetrFeatureExtractor
import torch
from PIL import Image

# Load the feature extractor and DETR model
feature_extractor = DetrFeatureExtractor.from_pretrained("smutuvi/flower_count_model")
model = DetrForObjectDetection.from_pretrained(
    "smutuvi/flower_count_model",
    use_safetensors=True
)

import sys
from transformers import DetrForObjectDetection, DetrImageProcessor
import torch
from PIL import Image

image_processor = DetrImageProcessor.from_pretrained("smutuvi/flower_count_model")
model = DetrForObjectDetection.from_pretrained(
    "smutuvi/flower_count_model",
    use_safetensors=True
)

flower_counts = {}
image_paths = sys.argv[1]
for image_path in image_paths.split(', '):
    image = Image.open(image_path)
    inputs = image_processor(images=image, return_tensors="pt")

    with torch.no_grad():
        outputs = model(**inputs)

    logits = outputs.logits
    boxes = outputs.pred_boxes
    flower_counts[image_path] = (logits.argmax(-1) == 1).sum().item()
    print(f"Detected number of flowers: {flower_counts[image_path]}")

from PIL import Image
import matplotlib.pyplot as plt
import os

destination_dir_path = f"{os.path.dirname(os.path.realpath(__file__))}/tested_images"
if not os.path.isdir(destination_dir_path):
    os.makedirs(destination_dir_path)

for image_path in image_paths.split(', '):
    image = Image.open(image_path)
    plt.figure(figsize=(12, 12))
    plt.imshow(image)
    plt.axis('on')
    plt.text(10, 30, f'Detected number of flowers: {flower_counts[image_path]}', color='white', fontsize=14, backgroundcolor='blue')
    base_name = os.path.basename(image_path)
    plt.savefig(f"{destination_dir_path}/{base_name}")
