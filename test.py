# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mdNxFMZ6Rzw_QGb90_7hcaPB2tcJj7Ft
"""
import pip
package_names=['timm', 'transformers', 'torch', 'safetensors', 'Pillow', 'sys', 'os', 'numpy==1.23.3', 'matplotlib'] #packages to install
pip.main(['install'] + package_names + ['--upgrade'])

# from google.colab import drive
# drive.mount('/content/drive')

import torch
import sys
import numpy
from PIL import Image
from transformers import DetrForObjectDetection, DetrFeatureExtractor

# Load the feature extractor and DETR model
feature_extractor = DetrFeatureExtractor.from_pretrained("smutuvi/flower_count_model")
model = DetrForObjectDetection.from_pretrained(
    "smutuvi/flower_count_model",
    use_safetensors=True
)

from transformers import DetrForObjectDetection, DetrImageProcessor
import torch
from PIL import Image

image_processor = DetrImageProcessor.from_pretrained("smutuvi/flower_count_model")
model = DetrForObjectDetection.from_pretrained(
    "smutuvi/flower_count_model",
    use_safetensors=True
)

flower_counts = {}

image_paths = sys.argv[1]
for image_path in image_paths.split(', '):
    image = Image.open(image_path)
    inputs = image_processor(images=image, return_tensors="pt")

    with torch.no_grad():
        outputs = model(**inputs)

    logits = outputs.logits
    boxes = outputs.pred_boxes

    flower_counts[image_path] = (logits.argmax(-1) == 1).sum().item()

    print(f"Detected number of flowers: {flower_counts[image_path]}")

from PIL import Image
import matplotlib.pyplot as plt
import os

for image_path in image_paths.split(', '):
    image = Image.open(image_path)

    plt.figure(figsize=(12, 12))
    plt.imshow(image)
    plt.axis('on')
    plt.text(10, 30, f'Detected number of flowers: {flower_counts[image_path]}', color='white', fontsize=14, backgroundcolor='blue')
    base_name = os.path.basename(image_path)
    print(f"===== base_name: {base_name}")

    plt.savefig(f"tested_images/{base_name}")
    # plt.show(*, block=False)

